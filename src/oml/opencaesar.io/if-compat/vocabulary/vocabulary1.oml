@dc:title "Example Vocabulary"
@dc:creator "Example Company"
@dc:rights "Copyright 2019, by Example Company"
vocabulary <http://opencaesar.io/if-compat/vocabulary/vocabulary1#> as vocabulary1 {
	
	extends <http://purl.org/dc/elements/1.1/> as dc
	extends <http://www.w3.org/2001/XMLSchema#> as xsd
	extends <http://www.w3.org/2003/11/swrlb#> as swrlb
	
	extends <http://imce.jpl.nasa.gov/foundation/mission#> as mission
	
	aspect Versioned

	scalar property hasMajorVersion [
		domain Versioned
		range xsd:nonNegativeInteger
		functional
	]
	
	scalar property hasMinorVersion [
		domain Versioned
		range xsd:nonNegativeInteger
		functional
	]
	
	scalar property hasPatchVersion [
		domain Versioned
		range xsd:nonNegativeInteger
		functional
	]
	
	relation entity IsCompatibleWith [
		from Versioned
		to Versioned
		forward isCompatibleWith
		symmetric
	]
	
	ref concept mission:Component < Versioned [
		restricts all isCompatibleWith to mission:Component
	]
	
	concept Platform < mission:Component
	
	concept Module < mission:Component
	
	ref concept mission:Interface < Versioned [
		restricts all isCompatibleWith to mission:Interface
	]
	
	scalar property hasInterfaceType [
		domain mission:Interface
		range xsd:string
		functional
	]
	
	relation entity IsTypeCompatibleWith [
		from mission:Interface
		to mission:Interface
		forward isTypeCompatibleWith
		symmetric
		irreflexive
	]
	
	concept ProviderInterface < mission:Interface
	concept ConsumerInterface < mission:Interface
	
	concept PlatformProviderInterface < ProviderInterface [
		restricts all mission:isPresentedBy to Platform
	]
	
	concept PlatformConsumerInterface < ConsumerInterface [
		restricts all mission:isPresentedBy to Module
	]
	
	concept ServiceProviderInterface < ProviderInterface [
		restricts all mission:isPresentedBy to Module
	]
	
	concept ServiceConsumerInterface < ConsumerInterface [
		restricts all mission:isPresentedBy to Module
	]
	
	rule TypeCompatibleInterfaces [
		ProviderInterface(pi) & hasInterfaceType(pi, it) & 
		ConsumerInterface(ci) & hasInterfaceType(ci, it)
		->
		isTypeCompatibleWith(pi, ci)
	]
	
	rule InterfacesWithCompatiblePatchVersions [
		isTypeCompatibleWith(pi, ci) &
		hasMajorVersion(pi, ma) & hasMajorVersion(ci, ma) &
		hasMinorVersion(pi, mi) & hasMinorVersion(ci, mi) &
		hasPatchVersion(pi, pp) & hasPatchVersion(ci, cp) &
		builtIn(swrlb:lessThanOrEqual, cp, pp)
		->
		isCompatibleWith(pi, ci)
	]
	
	rule InterfacesWithCompatibleMinorVersions [
		isTypeCompatibleWith(pi, ci) &
		hasMajorVersion(pi, ma) & hasMajorVersion(ci, ma) &
		hasMinorVersion(pi, pm) & hasMinorVersion(ci, cm) &
		builtIn(swrlb:lessThanOrEqual, cm, pm)
		->
		isCompatibleWith(pi, ci)
	]
	
	rule CompatiblePlatformsAndModules [
		Platform(p) & mission:presents(p, pi) &
		Module(m) & mission:presents(m, mi) &
		isCompatibleWith(pi, mi)
		->
		isCompatibleWith(p, m)
	]
	
	rule CompatibleModules [
		Module(m1) & mission:presents(m1, i1) &
		Module(m2) & mission:presents(m2, i2) &
		isCompatibleWith(i1, i2)
		->
		isCompatibleWith(m1, m2)
	]
	
}

